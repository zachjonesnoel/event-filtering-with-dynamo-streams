# SAM template for Avengers Threat - Lambda fn Event-filtering with DynamoDB Streams

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  event-filtering

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  ToEmail:
    Type: String
    Description: "Enter the email address which receives emails"
  FromEmail:
    Type: String
    Description: "Enter the email address which sends emails (SES email identity/domain needs to be verified)"
  SESIdentityName:
    Type: String
    Description: "verified SES email identity/domain"

Resources:
  
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: get-all-items.getAllItemsHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get all items.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref DynamoDBTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: get-by-id.getByIdHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get an item by item ID.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref DynamoDBTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET

  deleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: delete-item.deleteItemHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Delete item from DynamoDB.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref DynamoDBTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: DELETE

  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: put-item.putItemHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref DynamoDBTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST

  putItemTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: dynamodb-insert-trigger.putItemTriggerHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: DynamoDB put event trigger.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - SESCrudPolicy:
            IdentityName: !Ref SESIdentityName
      Environment:
        Variables:
          TO_EMAIL: !Ref ToEmail
          FROM_EMAIL: !Ref FromEmail
      Events:
        DynamoDBTable:
          Type: DynamoDB
          Properties:
            Stream:
              !GetAtt DynamoDBTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 100
            FilterCriteria:
              Filters:
                  # Filter pattern to check only inserted action on DynamoDB with the item_type being THREAT
                - Pattern: '{"eventName": ["INSERT"],"dynamodb":{"NewImage":{"item_type":{"S": [ "THREAT" ]}}}}'

  deleteItemTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: dynamodb-delete-trigger.deleteItemTriggerHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: DynamoDB delete event trigger.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - SESCrudPolicy:
            IdentityName: !Ref SESIdentityName
      Environment:
        Variables:
          TO_EMAIL: !Ref ToEmail
          FROM_EMAIL: !Ref FromEmail
      Events:
        DynamoDBTable:
          Type: DynamoDB
          Properties:
            Stream:
              !GetAtt DynamoDBTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 100
            FilterCriteria:
              Filters:
                  # Filter pattern to check only deleted action on DynamoDB
                - Pattern: '{"eventName": ["REMOVE"]}'

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES 

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
